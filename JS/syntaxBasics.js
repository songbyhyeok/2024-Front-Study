// 변수란 저장된 값을 참조할 수 있는 식별자
var x;

// 리터럴은 직접 만들어낸 상수 값
10.50;
'HelloWorld';

// 원시 타입은 실제 데이터 값을 저장하는 타입, 참조 타입은 기본 타입 제외한 객체 주소 저장 타입
// 동적타이핑은 변수 선언 시 타입을 미리 지정하지 않는 것

// 연산자는 하나 이상의 표현식으로써 하나의 값을 만든다.
var area = 5 * 4;

// 키워드는 수행할 동작을 규정하는 것

// 문은 단계별로 수행될 명령들의 집합
var x = 10;
var y = 2;
var z = x + y;

// 함수는 작업 수행을 위한 문들의 집합
function plus(number) {
    return number + number
}

// string 타입
// ``, "", '' <- 문자열은 이 중 하나의 방법으로 감싸서 만든다.
// JS에서 원시타입 취급

// undefined 타입
// 변수 선언 이후 값이 없다면 undefined 타입이 된다.
// JS 엔진이 변수 초기화 시 사용되는 값의 타입

// null 타입
// 변수에 값이 없다는 것을 명시할 때 사용

// symbol
// ES6에서 추가된 타입
// Symbol 함수를 통해 호출해 생성한다.
// 이름의 충돌이 없는 유일 프로퍼티 키를 만들기 위해 사용
var key = Symbol('key');
console.log(typeof key);

// JS 객체는 원시타입 제외한 함수, 배열, 정규표현식 등등
// 키와 값으로 구성된 프로퍼티(property)의 집합
var obj = {}; // 객체
var func = function() {}; // 함수
var arr = []; // 배열 
